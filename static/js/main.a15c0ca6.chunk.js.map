{"version":3,"sources":["pages/Weather/components/ForecastList/ForecastList.module.css","pages/Weather/components/ForecastCard/ForecastCard.module.css","shared/components/Card/Card.module.css","pages/Weather/Weather.module.css","shared/components/Header/Header.module.css","shared/components/Loader/Loader.js","shared/components/Switch/Switch.js","shared/components/Header/Header.js","shared/components/Button/Button.js","shared/components/Card/Card.js","shared/utils/temperatureConverter.js","pages/Weather/components/ForecastCard/ForecastCard.js","pages/Weather/components/ForecastList/ForecastList.js","pages/Weather/components/ForecastChart/ForecastChart.js","pages/Weather/Weather.util.js","pages/Weather/Weather.apis.js","pages/Weather/Weather.slice.js","pages/Weather/Weather.js","App.js","store/store.js","serviceWorker.js","index.js","shared/components/Loader/Loader.module.css","shared/components/Switch/Switch.module.css","pages/Weather/components/ForecastChart/ForecastChart.module.css","shared/components/Button/Button.module.css"],"names":["module","exports","Loader","className","styles","loader","loader__spinner","loader__text","defaultProps","Switch","onChange","checked","customStyles","switch","type","switch__input","switch__circle","Header","title","isCelsius","setIsCelsius","header","container","header__title","header__switch","header__switch__label","variantTypes","invert","danger","Button","children","onClick","variant","disabled","button","Card","card","temperatureConverter","tempInCelsius","toCelsius","Math","round","ForecastCard","data","isActive","onCardClick","active","Fragment","card__field","card__field__label","card__field__value","moment","date","format","avg_temp","ForecastList","list","activeForecastDate","setActiveForecastDate","useState","setData","currentPage","setCurrentPage","pageSize","totalPages","setTotalPages","useEffect","ceil","length","forecast","forecast__header","forecast__title","forecast__buttonGroup","forecast__button","forecast__buttonPrev","forecast__buttonNext","forecast__cards","endIndex","startIndex","slice","getPageData","map","key","XAxisLabel","style","transform","ForecastChart","forecastDate","wrapper","chartContainer","width","containerWidth","window","innerWidth","getChartWidth","height","margin","top","right","left","bottom","dataKey","label","value","angle","fill","getChartData","item","time","dt_txt","substr","indexOf","temp","main","API_KEY","process","REACT_APP_WEATHER_API_KEY","getWeather","a","axios","get","params","q","APPID","cnt","units","console","error","weatherSelector","state","cityInfo","weather","forecastList","forecastByDate","weatherSlice","createSlice","name","initialState","reducers","fetchWeatherDataSuccess","action","payload","reduce","acc","split","push","getAverageTemp","day","info","getWeatherList","city","actions","Weather","useSelector","dispatch","useDispatch","apis","response","content","App","configureStore","reducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a15c0ca6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"forecast\":\"ForecastList_forecast__39bfI\",\"forecast__header\":\"ForecastList_forecast__header__3Haar\",\"forecast__title\":\"ForecastList_forecast__title__1yMDN\",\"forecast__buttonGroup\":\"ForecastList_forecast__buttonGroup__34Xt0\",\"forecast__button\":\"ForecastList_forecast__button__3HTUd\",\"forecast__buttonPrev\":\"ForecastList_forecast__buttonPrev__3Fcos\",\"forecast__buttonNext\":\"ForecastList_forecast__buttonNext__2M3-k\",\"forecast__cards\":\"ForecastList_forecast__cards__2zSn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"ForecastCard_card__8Dqgd\",\"active\":\"ForecastCard_active__121jB\",\"card__field\":\"ForecastCard_card__field__2z3hU\",\"card__field__label\":\"ForecastCard_card__field__label__N4Y52\",\"card__field__value\":\"ForecastCard_card__field__value__rPDvy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2mtgf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Weather_content__mP902\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3dVUz\",\"header__title\":\"Header_header__title__28fUQ\",\"header__switch\":\"Header_header__switch__35KSY\",\"header__switch__label\":\"Header_header__switch__label__2rqiA\",\"container\":\"Header_container__1hKOs\"};","import React from \"react\";\nimport styles from \"./Loader.module.css\";\n\nconst Loader = () => (\n    <div className={styles.loader}>\n        <div className={styles.loader__spinner} />\n        <span className={styles.loader__text}>Loading...</span>\n    </div>\n);\n\nLoader.propTypes = {\n\n}\n\nLoader.defaultProps = {\n\n}\n\nexport default Loader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Switch.module.css\";\n\nconst Switch = ({ onChange, checked, customStyles }) => (\n    <label\n        className={`\n            ${styles.switch}\n            ${customStyles.switch}\n        `}\n    >\n        <input\n            type=\"checkbox\"\n            className={`\n                ${styles.switch__input}\n                ${customStyles.switch__input}\n            `}\n            onChange={onChange}\n            checked={checked}\n        />\n        <span className={`${styles.switch__circle} ${customStyles.switch__circle}`} />\n    </label>\n)\n\nSwitch.propTypes = {\n    onChange: PropTypes.func,\n    checked: PropTypes.bool,\n    customStyles: PropTypes.shape({\n        switch: PropTypes.string,\n        switch__circle: PropTypes.string,\n        switch__input: PropTypes.string,\n    }),\n}\n\nSwitch.defaultProps = {\n    onChange: () => {},\n    checked: false,\n    customStyles: {\n        switch: \"\",\n        switch__circle: \"\",\n        switch__input: \"\",\n    },\n}\n\nexport default Switch;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Header.module.css\";\nimport Switch from \"../Switch/Switch\";\n\nconst Header = ({ title, isCelsius, setIsCelsius }) => (\n    <header className={styles.header}>\n        <div className={styles.container}>\n            <h1 className={styles.header__title}>{title}</h1>\n            <label className={styles.header__switch}>\n                <span className={styles.header__switch__label}>ºF</span>\n                <Switch\n                    checked={isCelsius}\n                    onChange={setIsCelsius}\n                />\n                <span className={styles.header__switch__label}>ºC</span>\n            </label>\n        </div>\n    </header>\n)\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    isCelsius: PropTypes.bool,\n    setIsCelsius: PropTypes.func,\n}\n\nHeader.defaultProps = {\n    title: \"\",\n    isCelsius: false,\n    setIsCelsius: () => {}\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport styles from './Button.module.css';\n\nexport const variantTypes = {\n    invert: \"invert\",\n    danger: \"danger\",\n}\n\nconst Button = ({ children, onClick, variant, customStyles = {}, type, disabled }) => (\n    <button\n        className={`\n            ${styles.button}\n            ${customStyles.button}\n            ${variantTypes[variant] ? [styles[variantTypes[variant]]] : ''}\n        `}\n        type={type}\n        onClick={onClick}\n        disabled={disabled}\n    >{children}</button>\n);\n\nButton.propTypes = {\n    children: PropTypes.node,\n    onClick: PropTypes.func,\n    variantTypes: PropTypes.oneOf([\"\", \"invert\", \"danger\"]), // from variantTypes\n    customStyles: PropTypes.object,\n    type: PropTypes.string,\n    disabled: PropTypes.bool,\n};\n\nButton.defaultProps = {\n    children: \"\",\n    onClick: () => {},\n    variantTypes: \"\", // from variantTypes\n    customStyles: {},\n    type: \"button\",\n    disabled: false\n};\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Card.module.css\";\n\nconst Card = ({ children, customStyles, onClick }) => (\n    <div\n        className={`${styles.card} ${customStyles.card}`}\n        onClick={onClick}\n    >{children}</div>\n)\n\nCard.propTypes = {\n    children: PropTypes.element,\n    customStyles: PropTypes.shape({\n        card: PropTypes.string\n    }),\n    onClick: PropTypes.func,\n}\n\nCard.defaultProps = {\n    children: \"\",\n    customStyles: {\n        card: \"\"\n    },\n    onClick: () => {}\n}\n\nexport default Card;\n","const temperatureConverter = (tempInCelsius, toCelsius) => {\n    if (!toCelsius) {\n        return Math.round((tempInCelsius * (9 / 5)) + 32);\n    }\n    return Math.round(tempInCelsius);\n}\n\nexport default temperatureConverter;\n","import React from \"react\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport Card from \"../../../../shared/components/Card/Card\";\nimport styles from \"./ForecastCard.module.css\";\nimport temperatureConverter from \"../../../../shared/utils/temperatureConverter\";\n\nconst ForecastCard = ({ data, isActive, onCardClick, isCelsius }) => (\n    <Card customStyles={{ card: `${styles.card} ${isActive ? styles.active: \"\"}`}} onClick={onCardClick}>\n        <React.Fragment>\n            <div className={styles.card__field}>\n                <span className={styles.card__field__label}>Date: </span>\n                <span className={styles.card__field__value}>{moment(data.date).format(\"Do MMM YY\")}</span>\n            </div>\n            <div className={styles.card__field}>\n                <span className={styles.card__field__label}>Temp: </span>\n                <span className={styles.card__field__value}>\n                    {temperatureConverter(data.avg_temp, isCelsius)}\n                    {isCelsius ? \" ºC\" : \" ºF\"}\n                </span>\n            </div>\n        </React.Fragment>\n    </Card>\n)\n\nForecastCard.propTypes = {\n    data: PropTypes.object,\n    isActive: PropTypes.bool,\n    onCardClick: PropTypes.func,\n    isCelsius: PropTypes.bool\n}\n\nForecastCard.defaultProps = {\n    data: {},\n    isActive: false,\n    onCardClick: () => {},\n    isCelsius: true\n}\n\nexport default ForecastCard;\n","import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"../../../../shared/components/Button/Button\";\nimport ForecastCard from \"../ForecastCard/ForecastCard\";\nimport styles from \"./ForecastList.module.css\";\n\nconst ForecastList = ({ list, activeForecastDate, setActiveForecastDate, isCelsius }) => {\n    const [data, setData] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [pageSize] = useState(3);\n    const [totalPages, setTotalPages] = useState(0);\n\n    useEffect(() => {\n        setData(list);\n        setTotalPages(Math.ceil(list.length / pageSize));\n        setActiveForecastDate(list[0].date);\n    }, [list, pageSize, setActiveForecastDate]);\n\n    const getPageData = () => {\n        const endIndex = currentPage * pageSize;\n        const startIndex = endIndex - pageSize;\n        return data.slice(startIndex, endIndex);\n    }\n\n    const onPrevPage = () => {\n        if (currentPage > 1) {\n            setCurrentPage(currentPage - 1);\n        }\n    }\n\n    const onNextPage = () => {\n        if (totalPages > currentPage) {\n            setCurrentPage(currentPage + 1);\n        }\n    }\n\n    return (\n        <div className={styles.forecast}>\n            <div className={styles.forecast__header}>\n                <h2 className={styles.forecast__title}>Weather</h2>\n                <div className={styles.forecast__buttonGroup}>\n                    <Button\n                        onClick={() => onPrevPage()}\n                        disabled={!(currentPage > 1)}\n                        customStyles={{\n                            button: `${styles.forecast__button}\n                            ${styles.forecast__buttonPrev}`,\n                        }}\n                    />\n                    <Button\n                        onClick={() => onNextPage()}\n                        disabled={!(totalPages > currentPage)}\n                        customStyles={{\n                            button: `${styles.forecast__button}\n                            ${styles.forecast__buttonNext}`,\n                        }}\n                    />\n                </div>\n            </div>\n            <div className={styles.forecast__cards}>\n                {getPageData().map(data => <ForecastCard\n                    key={data.date}\n                    data={data}\n                    isCelsius={isCelsius}\n                    isActive={data.date === activeForecastDate}\n                    onCardClick={() => setActiveForecastDate(data.date)}\n                />)}\n            </div>\n        </div>\n    )\n}\n\nForecastList.propTypes = {\n    list: PropTypes.array,\n    activeForecastDate: PropTypes.string,\n    setActiveForecastDate: PropTypes.func,\n    isCelsius: PropTypes.bool,\n}\n\nForecastList.defaultProps = {\n    list: [],\n    activeForecastDate: \"\",\n    setActiveForecastDate: () => {},\n    isCelsius: true,\n}\n\nexport default ForecastList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip } from 'recharts';\nimport styles from \"./ForecastChart.module.css\";\nimport moment from \"moment\";\n\nconst XAxisLabel = () => (\n    <g style={{ transform: \"translate(50%, 100%)\" }}>\n        <text>Time</text>\n    </g>\n)\n\nconst ForecastChart = ({ data, forecastDate }) => {\n    const getChartWidth = () => {\n        const maxChartWidth = 600;\n        const containerWidth = window.innerWidth - 48;\n        return maxChartWidth > containerWidth ? containerWidth : maxChartWidth;\n    }\n    return(\n        <div className={styles.wrapper}>\n            <h2 className={styles.title}>{moment(forecastDate).format(\"Do MMMM\")}</h2>\n            <div className={styles.chartContainer}>\n                <BarChart\n                    width={getChartWidth()}\n                    height={220}\n                    data={data}\n                    margin={{ top: 0, right: 0, left: -18, bottom: 0 }}\n                >\n                    <XAxis dataKey=\"time\" label={<XAxisLabel />} />\n                    <YAxis label={{ value: 'Temperature', angle: -90 }} />\n                    <Tooltip />\n                    <Bar dataKey=\"temp\" fill=\"#688696\" />\n                </BarChart>\n            </div>\n        </div>\n    );\n}\n\nForecastChart.propTypes = {\n    data: PropTypes.array,\n    forecastDate: PropTypes.string,\n}\n\nForecastChart.defaultProps = {\n    data: [],\n    forecastDate: \"\"\n}\n\nexport default ForecastChart;\n","import temperatureConverter from \"../../shared/utils/temperatureConverter\";\n\nexport const groupWeatherByDate = (list) => {\n    return list.reduce((acc, item) => {\n        const date = item.dt_txt.split(\" \", 1);\n        if(acc[date]) {\n            acc[date].push(item);\n        } else {\n            acc[date] = [item];\n        }\n        return acc;\n    }, {});\n}\n\nexport const getWeatherList = (data) => {\n    const list = [];\n    const getAverageTemp = (day) => {\n        const sumTemp = day.reduce((acc, item) => {\n            acc += item.main.temp;\n            return acc;\n        }, 0);\n        return sumTemp/day.length;\n    }\n    for(let day in data) {\n        const info = {\n            date: day,\n            avg_temp: getAverageTemp(data[day]),\n        }\n        list.push(info);\n    }\n    return list;\n}\n\nexport const getChartData = (data, isCelsius) => {\n    return data.map(item => {\n        return {\n            time: item.dt_txt.substr(item.dt_txt.indexOf(\" \") + 1, 5),\n            temp: temperatureConverter(item.main.temp, isCelsius),\n        }\n    })\n}\n","import axios from \"axios\";\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY; //Picked up from github secrets\n\nconst getWeather = async () => {\n    const location = \"Munich,de\";\n    const cnt = \"40\";\n    try {\n        return await axios.get(\"https://api.openweathermap.org/data/2.5/forecast\", {\n            params: {\n                q: location,\n                APPID: API_KEY,\n                cnt,\n                units: \"metric\"\n            }}\n        );\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport default {\n    getWeather,\n};\n","import {createSlice} from \"@reduxjs/toolkit\";\nimport {getWeatherList, groupWeatherByDate} from \"./Weather.util\";\nimport apis from \"./Weather.apis\";\n\nconst weatherInitialState = {\n    cityInfo: {},\n    forecastList: [],\n    forecastByDate: {},\n};\n\nexport const weatherSelector = state => ({\n    cityInfo: state.weather.cityInfo,\n    forecastList: state.weather.forecastList,\n    forecastByDate: state.weather.forecastByDate,\n});\n\nconst weatherSlice = createSlice({\n    name: \"weather\",\n    initialState: weatherInitialState,\n    reducers: {\n        fetchWeatherDataSuccess: (state, action) => {\n            const forecastByDate = groupWeatherByDate(action.payload.list);\n            const forecastList = getWeatherList(forecastByDate);\n            state.cityInfo = action.payload.city;\n            state.forecastList = forecastList;\n            state.forecastByDate = forecastByDate;\n        },\n    }\n});\n\nconst { fetchWeatherDataSuccess } = weatherSlice.actions;\n\nexport const fetchWeatherData = () => async dispatch => {\n    try {\n        const response = await apis.getWeather();\n        dispatch(fetchWeatherDataSuccess(response.data))\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport default weatherSlice;\n","import React, {useEffect, useState} from \"react\";\nimport Loader from \"../../shared/components/Loader/Loader\";\nimport Header from \"../../shared/components/Header/Header\";\nimport ForecastList from \"./components/ForecastList/ForecastList\";\nimport ForecastChart from \"./components/ForecastChart/ForecastChart\";\nimport {getChartData} from \"./Weather.util\";\nimport styles from \"./Weather.module.css\";\nimport {fetchWeatherData, weatherSelector} from \"./Weather.slice\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Weather = () => {\n    const state = useSelector(weatherSelector);\n    const dispatch = useDispatch();\n    const [isCelsius, setIsCelsius] = useState(true);\n    const [activeForecastDate, setActiveForecastDate] = useState(null);\n\n    useEffect(() => {\n        dispatch(fetchWeatherData());\n    }, [dispatch]);\n\n    return (\n        (state.forecastList.length) ?\n        <React.Fragment>\n            <Header\n                title={state.cityInfo.name}\n                setIsCelsius={() => setIsCelsius(!isCelsius)}\n                isCelsius={isCelsius}\n            />\n            <div className={styles.content}>\n                <ForecastList\n                    list={state.forecastList}\n                    isCelsius={isCelsius}\n                    activeForecastDate={activeForecastDate}\n                    setActiveForecastDate={date => setActiveForecastDate(date)}\n                />\n                {activeForecastDate && <ForecastChart\n                    forecastDate={activeForecastDate}\n                    data={getChartData(state.forecastByDate[activeForecastDate], isCelsius)}\n                />}\n            </div>\n        </React.Fragment> :\n        <Loader />\n    );\n}\n\nWeather.propTypes = {}\n\nWeather.defaultProps = {}\n\nexport default Weather;\n","import React from 'react';\r\nimport './App.css';\r\nimport Weather from \"./pages/Weather/Weather\";\r\n\r\nconst App = () => <Weather />;\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport weatherSlice from \"../pages/Weather/Weather.slice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    weather: weatherSlice.reducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the store load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web store is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different store. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your store to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__3Ku7_\",\"loader__spinner\":\"Loader_loader__spinner__2TUQn\",\"loading\":\"Loader_loading__2TJ_o\",\"loader__text\":\"Loader_loader__text__1uZ15\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"Switch_switch__3fe8q\",\"switch__input\":\"Switch_switch__input__291o-\",\"switch__circle\":\"Switch_switch__circle__80GYp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ForecastChart_wrapper__UxHGX\",\"title\":\"ForecastChart_title__jWRBQ\",\"chartContainer\":\"ForecastChart_chartContainer__178UJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3ORSg\",\"invert\":\"Button_invert__18Yym\",\"danger\":\"Button_danger__2CiQ2\"};"],"sourceRoot":""}